
TV Renamr is a utility to rename TV shows based upon filenames or user input.



h1. Requirements

* Python 2.5+
* Pyinotify (for using the Daemon on Linux)
* The Interwebs



h1. How To Use

TV Renamr can be run with either the script or as a daemon (currently linux only)



h2. Script

Run the script with: @python tvrenamr.py [options] file/folder@

h3. Options

-e or --episode - Set the episode number for a file. Cannot be used when renaming more than one file.
--ignore-recursive - Only use files from the root of the specified directory and do not enter any sub-directories.
-l or --log_level - Set the log level. Valid options are debug, info, warning, error and critical.
--library - Set the library to use for retrieving episode titles. This defaults to tvrage, but thetvdb is also available.
-n or --name - Set the name of the name of the show to rename.
-o or --output - Set the output format for the episodes being renamed.
--organise - Automatically move renamed files to the directory specified with -r and organise them based on their show name and season number.
-r or --renamed - The directory to move renamed files to, if not specified the working directory is used.
--regex - The regular expression to use when extracting information from files.
-s or --season - Set the season number. Cannot be used when renaming more than one file.
-t or --the - Set the position of 'The' in a show's name to the end of the show name, i.e. 'The Wire' becomes 'Wire, The'.
-x or --exceptions - Specify the location of an exceptions file.

h3. Examples

* @python tvrenamr.py --organise --renamed=/path/to/a/directory/ /path/a/directory/or/file/[the_file.avi]@
* @python tvrenamr.py --season=number --name=name /path/to/a/file/the_file.avi@



h2. Daemon

The daemon will watch the specified folder for new files to rename so you can drag and drop files into it.
This is currently a Linux only script and requires kernel version 1.26.5 (?) or higher for the relevant dependencies.

Run it with: @python tvrenamrd.py [options] folder_to_watch@

h3. Options 

-l or --log_level - Set the log level. Valid options are debug, info, warning, error and critical.
--library - Set the library to use for retrieving episode titles. This defaults to tvrage, but thetvdb is also available.
-o or --output - Set the output format for the episodes being renamed.
--organise - Automatically move renamed files to the directory specified with -r and organise them based on their show name and season number.
-r or --renamed - The directory to move renamed files to, if not specified the working directory is used.
-t or --the - Set the position of 'The' in a show's name to the end of the file.
-x or --exceptions - Set the location of the exceptions file.

h3. Examples

* @python tvrenamrd.py /path/to/folder/to/watch/@
* @python tvrenamrd.py --renamed=/path/to/new/directory/ /path/to/folder/to/watch/@
* @python tvrenamrd.py --organise --renamed=/path/to/new/directory/ /path/to/folder/to/watch/@



h2. Custom Regular Expressions

By default TV Renamr will match shows in the formats: show.s0e00 and show.0x00 but you can specify custom regular expressions if your files aren't in 
either of these formats. Some custom regular expression syntax has been used to help you specify different parts of the filename:

* Show: @%n@ - @(?P<show>[\w\s.,_-]+)@
* Season: @%s@ - @(?P<season>[\d]{1,2})@
* Episode: @%e@ - @(?P<episode>[\d]{2})@

It is also possible to specify how many digits there are in the season and episode sections of the filename using the syntax:

* Season: @%s{n}@
* Episode: @%e{n}@

where the n in @{n}@ specifies how many digits are in each of the sections.

*Note:* All spaces are converted to periods before your regular expression is run.

Python regular expression syntax can be found at: "http://www.python.org/doc/2.6.1/library/re.html#regular-expression-syntax":http://www.python.org/doc/2.6.1/library/re.html#regular-expression-syntax




h2. Exceptions File

Specify files that you know have different show names in the their file names to that of the actual show name. Each line should define the expected show 
name from your files and then the actual show name, i.e what The Tv Db and Tv Rage expect the name to be, separated by the string ' => '. Lines 
beginning with # are treated as comments. 

h4. Example & Known Shows

@# This is a comment@
@american dad => american dad!@
@avatar => avatar: the last airbender@
@csi => csi: crime scene investigation@



h2. Custom Output Format

It is possible to set a custom output format for your files using the following syntax:

* @%n@ - Show
* @%s@ - Season
* @%e@ - Episode
* @%t@ - Title
* @%x@ - Extension

you can specify the format you like, i.e. @%n - %s%e - $t%x@ would mirror the default format.

*Note:* Not including the @%x@ section on Windows systems can cause problems when trying to run your media files.



h1. Known Issues

h2. Script & Daemon

All colons ':' are converted to commas ',' in both the show name and the episode title. This stops issues that can arise with network shares and gives 
a cleaner format on windows where python replaces the colon character with a backslash '\'.

When adding options it is sometimes easier to use the long version, especially if you need to pass data in with the switch. This is because specifying 
a short-hand version of a switch, say '-r', would require you to add the renamed path like so: @-r'/path/to/dir'@. Whereas the long-hand version, in 
this instance, tends to look neater - @--renamed=/path/to/dir@.

*Note:* When passing data to a short-hand switch you must not leave any spaces between the switch and the data or Tv Renamr will pick it up as the
working directory!



h2. Daemon

You cannot interactively set options while the daemon is running so using options such as --the will cause all shows with a leading The will have the 
leading The moved to a trailing The. This is not always a desired option if you want some shows to have the position of the leading The moved and 
some not.

When moving files into a watched folder you may see two entries in your logs for the file. One saying it was moved successfully and another saying it 
could not be moved since the renamed file already exists. Some architectures seem to pick up the file that was moved in twice so the initial rename is 
successful but the second one fails since the first one already moved the actual file. This seems to occur on some systems but not others and doesn't
cause any problems with the rename option but does muddy your log file unfortunately.